#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Uniforms
{
    float4x4 uWorldMat;
    float4x4 uViewMat;
    float4x4 uProjMat;
    float3 uCameraPosition;
    float3 uLightDir;
    float3 uLightColor;
    float3 uEmitLight;
};

struct fragmentShader_out
{
    float4 fragColor [[color(0)]];
};

struct fragmentShader_in
{
    float3 v_normal [[user(locn0)]];
    float2 v_texCoord [[user(locn1)]];
    float3 v_viewDir [[user(locn2)]];
};

fragment fragmentShader_out fragmentShader(fragmentShader_in in [[stage_in]], constant Uniforms& uniforms [[buffer(1)]], texture2d<float> uTexture [[texture(0)]], sampler uTextureSmplr [[sampler(0)]])
{
    fragmentShader_out out = {};
    float3 normal = fast::normalize(in.v_normal);
    float3 view = fast::normalize(in.v_viewDir);
    float3 light = fast::normalize(uniforms.uLightDir);
    float3 reflectDir = fast::normalize(reflect(-light, normal));
    float3 diffuseColor = uTexture.sample(uTextureSmplr, in.v_texCoord).xyz;
    float ambientConstant = 0.100000001490116119384765625;
    float3 ambient = diffuseColor * ambientConstant;
    float3 diffuse = diffuseColor * fast::max(dot(light, normal), 0.0);
    float specularShiness = 10.0;
    float3 specular = uniforms.uLightColor * powr(fast::max(dot(reflectDir, light), 0.0), specularShiness);
    float3 emit = uniforms.uEmitLight;
    float3 color = ((ambient + diffuse) + specular) + emit;
    out.fragColor = float4(color, 1.0);
    return out;
}